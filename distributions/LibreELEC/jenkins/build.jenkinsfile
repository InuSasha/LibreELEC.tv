pipeline {
    agent { label 'le-build' }
    environment {
        BRANCH='master'
        ALPHA='false'
        ALPHA_VERSION='1'
        
        CCACHE_DISABLE='1'
        CONCURRENCY_MAKE_LEVEL="${BUILD_CAUSE == 'SCMTRIGGER' ? '4' : '' }"
        PERIODIC="${BUILD_CAUSE == 'SCMTRIGGER' ? 'nightly' : '' }"
    }

    stages {
        stage('Checks') {
            script {
                if ( ALPHA == 'true' && ALPHA_VERSION?.trim() ) {
                    currentBuild.result = 'ABORTED'
                    error('ALPHA_VERSION must set when ALPHA is set to true')
                }
            }
        }

        stage('Checkout') {
            scm checkout
        }

        stage('Clean') {
            steps {
                sh """#!/bin/bash -ex
                    case "${Clean}" in
                        make_distclean) make distclean;;
                        make_clean)     make clean;;
                        no)             echo "Not cleaning build";;
                    esac
                """
            }
        }

        stage('Define Build Variables') {
            steps {
                sh """
# For template use
export JOB=${JOB_BASE_NAME}
echo ${JOB}

case "${JOB}" in
    box|box-trn9|box-z28|roc-cc|rock64|rockbox)
        UBOOT="${JOB}"
        JOB=RK3328
    ;;
    odroidn1|rock960|rockpro64|sapphire|khadas-edge|rock-pi-4)
        UBOOT="${JOB}"
        JOB=RK3399
    ;;
    pine64|pine64_plus|pine64_lts|orangepi_win)
        UBOOT="${JOB}"
        JOB=A64
    ;;
    bananapi_m2p|beelink_x2|libretech_h3|orangepi_2|orangepi_pc|orangepi_pc_plus|orangepi_plus2e|orangepi_plus)
        UBOOT="${JOB}"
        JOB=H3
    ;;
    orangepi_pc2)
        UBOOT="${JOB}"
        JOB=H5
    ;;
    pine_h64)
        UBOOT="${JOB}"
        JOB=H6
    ;; 
esac

# Remove the previous env.properties file that was created to propagate variables throughout the build
rm -Rf env.properties


DEVICE=`find projects -iname "${JOB}" -print | tail -n 1 | awk -F"/" '{print $4}' | tr -d '[:space:]'`
[ -z "${DEVICE}" ] && DEVICE=EMPTY && PROJECT="${JOB}" || PROJECT=`find projects -iname "${JOB}" -print | tail -n 1 | awk -F"/" '{print $2}' | tr -d '[:space:]'`


ARCH=`grep -o "x86_64" projects/${PROJECT}/options | tr -d '[:space:]'`
[ -z "${ARCH}" ] && ARCH="arm"; echo ${ARCH}; echo "ARCH = ${ARCH}" > env.properties || ARCH="x86_64"; echo ${ARCH}; echo "ARCH = ${ARCH}" > env.properties


# Assign the appropriate variables based on project selection
case "${DEVICE}" in
EMPTY)
    export PROJECT="${PROJECT}"; echo "PROJECT = ${PROJECT}" >> env.properties
    export DEF="${PROJECT}"; echo ${DEF}; echo "DEF = ${PROJECT}" >> env.properties
    [ "${BRANCH}" == "master" ] && [ "${PROJECT}" == "Amlogic" ] && PROJECT="Amlogic_Legacy"; echo ${PROJECT}; echo "PROJECT = ${PROJECT}" >> env.properties
    echo "0 1"
    ;;
*)
    export PROJECT="${PROJECT}"; echo "PROJECT = ${PROJECT}" >> env.properties
    export DEVICE="${DEVICE}"; echo "DEVICE = ${DEVICE}" >> env.properties
    export DEF="${DEVICE}"; echo ${DEF}; echo "DEF = ${DEVICE}" >> env.properties
    echo "${UBOOT}"; echo "UBOOT = ${UBOOT}" >> env.properties
    echo "0 2"
    ;;
esac

# Export variables so they can be used in the build and export them to the env.properties file
export R=`git rev-list HEAD --count`; echo "HEAD = r${R}" >> env.properties
#export LE_VER=`cat config/version | grep OS_VERSION | awk -F"\"" '{print $2}' | tail -n 1`; echo "LE_VER = ${LE_VER}" >> env.properties

export LE_VER=`cat distributions/LibreELEC/version | grep OS_VERSION | awk -F"\"" '{print $2}' | tail -n 1`; echo "LE_VER = ${LE_VER}" >> env.properties
"""

        stage('Build') {
            steps {
                sh """#!/bin/bash -ex
                    export WEEKLY="${LE_VER}-weekly-$(date +'%Y%U')"
                    echo "WEEKLY = ${WEEKLY}" >> env.properties

                    # Determine how the image will be built for sources and target and on which jenkins system
                    echo "Determine which build server we are on to define SOURCES and TARGET"
                    
                    SOURCES_DIR=""
                    case "${NODE_NAME}" in
                        build1)                      SOURCES_DIR="${BUILD1_SOURCES_DIR}";;
                        build2|build3|build4|build5) SOURCES_DIR="${BUILD2_SOURCES_DIR}";;
                    esac
                    
                    TARGET_DIR=""
                    case "${ALPHA}-${NODE_NAME}" in
                        true-build1)  TARGET_DIR="${BUILD1_TARGET_DIR}/upload";;
                        false-build1) TARGET_DIR="${BUILD1_TARGET_DIR}"
                        true-build*)  TARGET_DIR="${BUILD2_TARGET_DIR}/upload";;
                        false-build*) TARGET_DIR="${BUILD2_TARGET_DIR}"
                    esac
                    
                    case "${NODE_NAME}" in
                        build*) echo '';;
                        *)      echo "Unable to determine build server, SOURCES and TARGET will use defaults."
                    esac
               
                    if [ "${ALPHA}" == "true" ]; then
                        echo 'OFFICIAL="yes"' >> distributions/LibreELEC/version
                        sed -e 's|LIBREELEC_VERSION="devel"|LIBREELEC_VERSION="${ALPHA_VERSION}"|' -i distributions/LibreELEC/version
                        VER=`cat distributions/LibreELEC/version`
                        echo "${VER}"
                        BUILD_PERIODIC="${PERIODIC}"
                    fi
                    
                    echo "TARGET_DIR = ${TARGET_DIR}" >> env.properties
                    echo "SOURCES_DIR = ${SOURCES_DIR}" >> env.properties

                    export PROJECT="${PROJECT}"
                    export DEVICE="${DEVICE}"
                    export ARCH="${ARCH}"
                    export SOURCES_DIR="${SOURCES_DIR}"
                    export TARGET_DIR="${TARGET_DIR}"
                    export CONCURRENCY_MAKE_LEVEL="${CONCURRENCY_MAKE_LEVEL}"
                    export UBOOT_SYSTEM="${UBOOT}"
                    export BUILD_PERIODIC="${PERIODIC}"
                    
                    make image
                    PASS=`echo "$?"`
                """
            }
        }

        stage('Fill env.properties') {
            steps {
                sh """#!/bin/bash -ex
case "${UBOOT}" in

    box|box-trn9|box-z28|roc-cc|rock64|rockbox|odroidn1|rock960|rockpro64|sapphire|khadas-edge|rock-pi-4|pine64|pine64_plus|pine64_lts|orangepi_win|bananapi_m2p|beelink_x2|libretech_h3|orangepi_2|orangepi_pc|orangepi_pc_plus|orangepi_plus2e|orangepi_plus|orangepi_pc2|pine_h64)        
        case "${ALPHA}" in
            true)
                export BASE="LibreELEC-${DEF}.${ARCH}"
                echo "BASE = ${BASE}" >> env.properties
                export PRFILENAME="${BASE}-${ALPHA_VERSION}"
                echo "PRFILENAME = ${PRFILENAME}" >> env.properties
                export FILENAME="${PRFILENAME}-${JOB_NAME}"
                echo "FILENAME = ${FILENAME}" >> env.properties
            ;;
            *)
                export BASE="LibreELEC-${JOB}.${ARCH}"
                echo "BASE = ${BASE}" >> env.properties
                export BUILDNAME=`cat "build.LibreELEC-${JOB}.${ARCH}-${LE_VER}-devel/BUILD_FILENAME"`
                echo "BUILDNAME = ${BUILDNAME}" >> env.properties
                export FILENAME="${BUILDNAME}"
                echo "FILENAME = ${FILENAME}" >> env.properties
            ;;
        esac
    ;;
    *)
    case "${JOB}" in
        MiQi|TinkerBoard)
            case "${ALPHA}" in
                true)
                    export BASE="LibreELEC-${DEF}.${ARCH}"
                    echo "BASE = ${BASE}" >> env.properties
                    export PRFILENAME="${BASE}-${ALPHA_VERSION}"
                    echo "PRFILENAME = ${PRFILENAME}" >> env.properties
                    export FILENAME="${PRFILENAME}-rk3288"
                    echo "FILENAME = ${FILENAME}" >> env.properties
                ;;
                *)
                    export BASE="LibreELEC-${JOB_NAME}.${ARCH}"
                    echo "BASE = ${BASE}" >> env.properties
                    export BUILDNAME=`cat "build.LibreELEC-${JOB_NAME}.${ARCH}-${LE_VER}-devel/BUILD_FILENAME"`
                    echo "BUILDNAME = ${BUILDNAME}" >> env.properties
                    export FILENAME="${BUILDNAME}"
                    echo "FILENAME = ${FILENAME}" >> env.properties
                ;;
            esac
        ;;
        *)
        case "${ALPHA}" in
            true)
                export BASE="LibreELEC-${DEF}.${ARCH}"
                echo "BASE = ${BASE}" >> env.properties
                export PRFILENAME="${BASE}-${ALPHA_VERSION}"
                echo "PRFILENAME = ${PRFILENAME}" >> env.properties
                export FILENAME="${PRFILENAME}"
                echo "FILENAME = ${FILENAME}" >> env.properties
            ;;
            *)
                export BASE="LibreELEC-${DEF}.${ARCH}"
                echo "BASE = ${BASE}" >> env.properties
                export BUILDNAME=`cat "build.LibreELEC-${DEF}.${ARCH}-${LE_VER}-devel/BUILD_FILENAME"`
                echo "BUILDNAME = ${BUILDNAME}" >> env.properties
                export FILENAME="${BUILDNAME}"
                echo "FILENAME = ${FILENAME}" >> env.properties    
            ;;
        esac
        ;;
    esac
esac

                """
            }
        }

        stage('Upload') {
            steps {
                sh """#!/bin/bash -ex
                    UPLOAD_FILES="${URLWEBSERVER}/upload/${FILENAME}.tar ${URLWEBSERVER}/upload/${FILENAME}.img.gz"
                    TARGET_FILES="${TARGET_DIR}/${FILENAME}.tar ${TARGET_DIR}/${FILENAME}.img.gz"
                    TARGET_FILES+=" ${TARGET_DIR}/${FILENAME}.tar.sha256 ${TARGET_DIR}/${FILENAME}.img.gz.sha256"
                    WEBSERVER_FILES="${URLWEBSERVER}/${FILENAME}.tar ${URLWEBSERVER}/${FILENAME}.img.gz"
                    URLGROOVY="The tar files for ${DEF} can be found <a href=http://${URLWEBSERVER}/upload/${FILENAME}.tar>&nbsp;here&nbsp;</a>"
                    URLGROOVY+=", the img.gz can be found <a href=http://${URLWEBSERVER}/upload/${FILENAME}.img.gz>&nbsp;here&nbsp;</a>"
                    if [ "${DEF}" == "Generic" ]; then
                        UPLOAD_FILES+=" ${URLWEBSERVER}/upload/${FILENAME}.ova"
                        TARGET_FILES+=" ${TARGET_DIR}/${FILENAME}.ova ${TARGET_DIR}/${FILENAME}.ova.sha256"
                        WEBSERVER_FILES=" ${URLWEBSERVER}/${FILENAME}.ova"
                        URLGROOVY+=", and the ova can be found <a href=http://${URLWEBSERVER}/upload/${FILENAME}.ova>&nbsp;here&nbsp;</a>"
                    fi
                    URLGROOVY+=" for download."
                    
                    if [ "${ALPHA}" == "true" ]; then
                        UPLOAD_PATH="/var/www/releases-staging"
                    else
                        UPLOAD_PATH="/var/www/test"
                    fi
                    
                    
                    case "${ALPHA}-${PASS}" in
                        true-0)
                            export URL="with Alpha ${ALPHA_VERSION} for ${DEF} was built on ${NODE_NAME} and can be found at: ${UPLOAD_FILES}"
                            echo "URL = ${URL}" >> env.properties
                            export URLGROOVY="${URLGROOVY}"
                            echo "URLGROOVY = ${URLGROOVY}" >> env.properties

                            # Publish artifact via SSH only works for files under the workspace, since the target files are
                            # above workspace we need a workaround to get them to the web server.
                            scp -P 4567 -p ${TARGET_FILES} jenkins@releases.libreelec.tv:${UPLOAD_PATH} || true
                            ;;
                        
                        true-*)
                            echo "Build ${DEF}, failed on ${NODE_NAME}, not removing previous ${ALPHA_VERSION} from web server."
                            export URL="Build ${DEF}, failed on ${NODE_NAME}, not removing previous ${ALPHA_VERSION} from web server."
                            echo "URL = ${URL}" >> env.properties
                            export URLGROOVY="The build ${DEF} failed for this Alpha."; echo "URLGROOVY = ${URLGROOVY}" >> env.properties
                            ;;

                        *-0)
                            case "${JOB_BASE_NAME}" in
                                box|box-trn9|box-z28|roc-cc|rock64|rockbox|odroidn1|rock960|rockpro64|sapphire|khadas-edge|rock-pi-4|pine64|pine64_plus|pine64_lts|orangepi_win|bananapi_m2p|beelink_x2|libretech_h3|orangepi_2|orangepi_pc|orangepi_pc_plus|orangepi_plus2e|orangepi_plus|orangepi_pc2|pine_h64)
                                ssh jenkins@releases.libreelec.tv -p4567 "find ${UPLOAD_PATH}/${BASE}*${PERIODIC}*${JOB_BASE_NAME}* -type f -exec rm {} \;" || true
                                ;;
                            *)
                                ssh jenkins@releases.libreelec.tv -p4567 "find ${UPLOAD_PATH}/${BASE}*${PERIODIC}* -type f -exec rm {} \;" || true
                                ;;
                            esac
                            export URL="Today's nightly for ${JOB_BASE_NAME} was built on ${NODE_NAME} and can be found at: ${WEBSERVER_FILES}"
                            echo "URL = ${URL}" >> env.properties

                            ssh jenkins@releases.libreelec.tv -p4567 "mkdir -p ${UPLOAD_PATH}/" || true
                            scp -P 4567 -p ${TARGET_FILES} jenkins@releases.libreelec.tv:${UPLOAD_PATH} || true
                            ;;
                        
                        *-*)
                            echo "Build ${DEF}, failed on ${NODE_NAME}, not removing previous nightly from web server."
                            export URL="Build ${DEF}, failed on ${NODE_NAME}, not removing previous nightly from web server."
                            echo "URL = ${URL}" >> env.properties
                            ;;
                        
                    esac
                """
            }
        }

        stage('Cleanup - Post') {
            steps {
                sh """#!/bin/bash -ex
                    case "${Clean}" in
                        make_distclean) sleep 15
	                                rm -R packages/*
                                        make distclean
                                        ;;
                        make_clean)     make clean ;;
                        no)             echo "Not cleaning build";;
                    esac
                """
            }
        }

        stage('Show Env') {
            steps {
                sh """#!/bin/bash -ex
                    printenv
                """
            }
        }
    }
}
